from functools import lru_cache
from typing import List

from nose.tools import assert_equal


class Solution:
    def maxCoins(self, nums: List[int]) -> int:
        nums = [1] + nums + [1]  # add the dummy head and tail, both are left till end and DO NOT burst them.
        dp = [[0] * len(nums) for _ in nums]
        for i in range(len(nums) - 3, -1, -1):
            for j in range(i + 2, len(nums)):
                dp[i][j] = max([dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j] for k in range(i + 1, j)])
        return dp[0][len(nums) - 1]

    def maxCoins2(self, nums: List[int]) -> int:
        nums = [1] + nums + [1]
        dp = {}

        def dfs(l, r):
            if l > r:
                return 0
            if (l, r) in dp:
                return dp[(l, r)]
            dp[(l, r)] = 0
            for i in range(l, r + 1):
                coins = nums[l - 1] * nums[i] * nums[r + 1]
                coins += dfs(l, i - 1) + dfs(i + 1, r)
                dp[(l, r)] = max(dp[(l, r)], coins)
            return dp[(l, r)]

        return dfs(1, len(nums) - 2)

    def maxCoins1(self, nums: List[int]) -> int:
        @lru_cache(None)
        def search(nums):
            return 0 if len(nums) < 3 else max(
                [search(nums[:i + 1]) + search(nums[i:]) + nums[0] * nums[i] * nums[-1] for i in
                 range(1, len(nums) - 1)])

        return search(tuple([1] + nums + [1]))


class testSuits:

    @staticmethod
    def test(sol):
        assert_equal(sol([3, 1, 5, 8]), 167)
        assert_equal(sol([1, 5]), 10)
        assert_equal(sol(
            [70, 53, 55, 58, 46, 3, 75, 69, 30, 75, 79, 41, 93, 92, 37, 90, 74, 68, 69, 80, 67, 1, 48, 46, 66, 50, 26,
             45, 56, 36, 98, 12, 41, 39, 83, 63, 70, 75, 40, 8, 41, 43, 61, 37, 68, 27, 0, 11, 12, 20, 79, 24, 60, 52,
             11, 74, 12, 51, 76, 12, 32, 61, 0, 79, 44, 50, 28, 13, 85, 67, 92, 93, 15, 77, 70, 5, 2, 50, 19, 9, 69, 71,
             45, 24, 40, 34, 53, 1, 77, 12, 34, 26, 51, 63, 28, 59, 100, 68, 48, 11, 27, 3, 13, 64, 59, 44, 15, 53, 34,
             15, 1, 17, 10, 13, 0, 84, 38, 2, 8, 53, 12, 1, 36, 49, 2, 83, 72, 33, 38, 11, 55, 27, 66, 74, 100, 100, 46,
             34, 60, 0, 3, 19, 27, 49, 9, 33, 28, 4, 54, 79, 49, 52, 61, 11, 5, 78, 56, 67, 39, 68, 86, 1, 41, 59, 72,
             99, 81, 75, 15, 20, 88, 49, 41, 21, 70, 42, 29, 93, 44, 43, 94, 68, 66, 23, 37, 92, 21, 2, 34, 8, 11, 48,
             36, 22, 61, 83, 22, 72, 96, 64, 39, 16, 98, 46, 60, 60, 92, 49, 100, 68, 0, 87, 87, 31, 47, 47, 43, 10, 85,
             35, 32, 58, 43, 61, 40, 93, 1, 86, 50, 53, 88, 6, 30, 41, 49, 63, 35, 40, 0, 95, 86, 5, 64, 62, 1, 17, 24,
             30, 61, 18, 57, 97, 99, 7, 39, 64, 73, 17, 72, 8, 25, 82, 3, 18, 13, 27, 61, 18, 17, 17, 94, 63, 35, 65,
             18, 96, 9, 92, 51, 73, 81, 89, 13, 22, 77, 84, 17, 73, 77, 4, 27, 61, 71, 10, 25, 30, 16, 16, 64, 100]),
            94149414)
        assert_equal(sol(
            [18, 2, 8, 47, 99, 80, 12, 75, 97, 3, 46, 75, 71, 99, 55, 54, 39, 55, 73, 21, 67, 35, 89, 60, 95, 45, 89,
             96, 61, 70, 30, 34, 80, 7, 42, 10, 8, 72, 9, 84, 9, 49, 11, 47, 87, 84, 76, 87, 40, 98, 25, 10, 6, 13, 94,
             43, 34, 72, 79, 52, 75, 91, 45, 45, 90, 36, 9, 61, 58, 80, 13, 18, 67, 17, 4, 92, 71, 7, 44, 72, 45, 41,
             72, 72, 94, 20, 21, 42, 15, 45, 35, 5, 6, 25, 17, 87, 98, 75, 27, 74, 11, 48, 87, 50, 58, 9, 36, 90, 33,
             35, 94, 72, 84, 1, 21, 4, 75, 80, 28, 48, 57, 40, 87, 69, 89, 93, 28, 100, 44, 52, 87, 17, 15, 65, 67, 72,
             5, 92, 43, 90, 99, 53, 99, 55, 44, 22, 78, 93, 30, 72, 0, 28, 42, 83, 99, 1, 75, 2, 61, 1, 25, 73, 78, 86,
             20, 75, 15, 53, 44, 51, 9, 3, 85, 56, 83, 22, 18, 5, 73, 10, 53, 56, 29, 87, 76, 74, 12, 83, 33, 68, 20,
             51, 69, 31, 92, 24, 25, 51, 94, 26, 34, 25, 4, 56, 19, 56, 0, 58, 22, 94, 53, 78, 38, 20, 29, 74, 46, 21,
             44, 16, 77, 3, 49, 79, 28, 83, 61, 13, 39, 12, 91, 50, 60, 92, 100, 2, 5, 52, 98, 3, 80, 11, 34, 60, 35, 1,
             30, 91, 51, 52, 39, 72, 4, 29, 86, 64, 39, 51, 74, 99, 99, 32, 12, 16, 61, 88, 5, 82, 85, 19, 45, 80, 45,
             5, 63, 23, 51, 91, 97, 24, 35, 42, 60, 100, 8, 31, 39, 54, 80, 66, 28, 52, 75, 25, 66, 51, 20, 98, 99,
             78]),
            111830214)
        print('ALL TEST CASES PASSED')


s = Solution()
t = testSuits()
t.test(s.maxCoins)
